[
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": "workspace::ActivatePaneLeft",
      "ctrl-w l": "workspace::ActivatePaneRight",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-w j": "workspace::ActivatePaneDown",
      "alt-h": "workspace::ActivatePaneLeft",
      "alt-l": "workspace::ActivatePaneRight",
      "alt-k": "workspace::ActivatePaneUp",
      "alt-j": "workspace::ActivatePaneDown"
      // ... or other keybindings
    }
  },
  {
    "context": "DropdownTrigger",
    "bindings": {
      "ctrl-j": "menu::SelectNext",
      "ctrl-k": "menu::SelectPrevious"
    }
  },
  {
    "context": "Picker > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-j": "menu::SelectNext"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "up": "editor::ContextMenuPrevious",
      "ctrl-k": "editor::ContextMenuPrevious",
      "down": "editor::ContextMenuNext",
      "ctrl-j": "editor::ContextMenuNext",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast"
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      // Traditional Vim behavior
      "Q": "vim::AnyQuotes",
      "B": "vim::AnyBrackets",

      // mini.ai plugin behavior
      "q": "vim::MiniQuotes",
      "b": "vim::MiniBrackets"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      "shift-s": ["vim::PushAddSurrounds", {}]
    }
  },
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      "space g s": ["task::Spawn", { "task_name": "gitu" }],
      ", t": ["task::Spawn", {}]
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      // Put key bindings here if you want them to work in normal & visual mode.
    }
  },
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      // "shift-y": ["workspace::SendKeystrokes", "y $"] // Use neovim's yank behavior: yank to end of line.
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      // "j k": "vim::NormalBefore" // In insert mode, make jk escape to normal mode.
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Put key bindings here (in addition to the context above) if you want them to
      // work when no editor exists.
      // "space f": "file_finder::Toggle"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      // Vim mode comes with shortcuts to surround the selection in normal mode (ys),
      // but it doesn't have a shortcut to add surrounds in visual mode. By default,
      // shift-s substitutes the selection (erases the text and enters insert mode).
      // To use s to add surrounds in visual mode, you can add the following object to your keymap.
      "s": ["vim::PushAddSurrounds", {}]
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      // Enable SneakMotion
      "s": "vim::PushSneak",
      "shift-s": "vim::PushSneakBackward",
      "alt-o": "vim::SelectLargerSyntaxNode",
      "alt-i": "vim::SelectSmallerSyntaxNode"
    }
  }
  // If you prefer your cursor to wrap between lines, override these keybindings:
  // In VimScript, this would look like this:
  //  set whichwrap+=<,>,[,],h,l
  // {
  //   "context": "VimControl && !menu",
  //   "bindings": {
  //     "left": "vim::WrappingLeft",
  //     "right": "vim::WrappingRight",
  //     "h": "vim::WrappingLeft",
  //     "l": "vim::WrappingRight"
  //   }
  // }
  // ,
  // {
  //   "context": "VimControl && !menu && vim_mode != operator",
  //   "bindings": {
  //     "w": "vim::NextSubwordStart",
  //     "b": "vim::PreviousSubwordStart",
  //     "e": "vim::NextSubwordEnd",
  //     "g e": "vim::PreviousSubwordEnd"
  //   }
  // }
]
